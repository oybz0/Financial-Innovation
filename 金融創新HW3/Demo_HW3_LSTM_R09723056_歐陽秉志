{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_9\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_4 (LSTM)                (None, 256)               304128    \n",
      "_________________________________________________________________\n",
      "dense_10 (Dense)             (None, 10)                2570      \n",
      "_________________________________________________________________\n",
      "activation_4 (Activation)    (None, 10)                0         \n",
      "=================================================================\n",
      "Total params: 306,698\n",
      "Trainable params: 306,698\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "300/300 [==============================] - 10s 33ms/step - loss: 1.8262 - accuracy: 0.2661 - val_loss: 1.3850 - val_accuracy: 0.3912\n",
      "[[1885  378  131    0   56  125  212  194   19]\n",
      " [  89  558    0    0    0   51    0  802    0]\n",
      " [ 267    0  380    0  256    0  430    0  167]\n",
      " [  40  303    0    0    0   25    0 1132    0]\n",
      " [  49    0  315    0  733    0  198    0  205]\n",
      " [ 334  673    0    0    0  156    0  337    0]\n",
      " [ 910    1   63    0    5    1  515    0    5]\n",
      " [  22  266    0    0    0   15    0 1197    0]\n",
      " [  76    0  378    0  451    0  362    0  233]] \n",
      "\n",
      " [[635 113  38   0  11  34  90  62  17]\n",
      " [ 19 183   0   0   0   8   0 290   0]\n",
      " [ 86   0 123   0  91   0 126   0  74]\n",
      " [ 19  80   0   0   0   7   0 394   0]\n",
      " [ 21   0  93   0 248   0  68   0  70]\n",
      " [114 220   1   0   0  56   0 109   0]\n",
      " [282   0  16   0   0   0 201   0   1]\n",
      " [  5  72   0   0   0   1   0 422   0]\n",
      " [ 35   0 116   0 133   0 128   0  88]]\n",
      "LSTM test accuracy =  0.3912000060081482\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import pickle\n",
    "import keras\n",
    "from keras.layers import LSTM\n",
    "from keras.layers import Dense, Activation, Conv2D, MaxPool2D, Dropout, Flatten\n",
    "from keras.datasets import mnist\n",
    "from keras.models import Sequential\n",
    "from keras.optimizers import Adam\n",
    "\n",
    "\n",
    "f=open('hw3.pkl','rb')\n",
    "data=pickle.load(f)\n",
    "\n",
    "learning_rate = 0.001\n",
    "epochs = 50\n",
    "batch_size = 50\n",
    "\n",
    "n_input = 40\n",
    "n_step = 10\n",
    "n_hidden = 256\n",
    "n_classes = 10\n",
    "\n",
    "x_train, y_train, x_test, y_test = data['train_gaf'], data['train_label'][:, 0], data['test_gaf'], data['test_label'][:, 0]\n",
    "x_train = x_train.reshape(-1, n_step, n_input)\n",
    "x_test = x_test.reshape(-1, n_step, n_input)\n",
    "x_train = x_train.astype('float32')\n",
    "x_test = x_test.astype('float32')\n",
    "x_train /= 255\n",
    "x_test /= 255\n",
    "y_train = keras.utils.to_categorical(y_train, n_classes)\n",
    "y_test = keras.utils.to_categorical(y_test, n_classes)\n",
    "\n",
    "model = Sequential()\n",
    "model.add(LSTM(n_hidden, batch_input_shape=(None, n_step, n_input), unroll=True))\n",
    "model.add(Dense(n_classes))\n",
    "model.add(Activation('softmax'))\n",
    "\n",
    "\n",
    "adam = Adam(lr=learning_rate)\n",
    "model.summary()\n",
    "model.compile(optimizer=adam,loss='categorical_crossentropy', metrics=['accuracy'])\n",
    "model.fit(x_train, y_train,batch_size=batch_size, epochs=epochs,verbose=1, validation_data=(x_test, y_test))\n",
    "\n",
    "train_pred = model.predict_classes(x_train)\n",
    "test_pred = model.predict_classes(x_test)\n",
    "train_label = data['train_label'][:, 0]\n",
    "test_label = data['test_label'][:, 0]\n",
    "train_result_cm = confusion_matrix(train_label, train_pred, labels=range(9))\n",
    "test_result_cm = confusion_matrix(test_label, test_pred, labels=range(9))\n",
    "print(train_result_cm, '\\n'*2, test_result_cm)\n",
    "\n",
    "scores = model.evaluate(x_test, y_test, verbose=0)\n",
    "print('LSTM test accuracy = ', scores[1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
